%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Pweave document: To process, run the following:
% $ pweave -f texpygments omnetpp2017_reproducible_research.Plw
% $ latexmk -pdf omnetpp2017_reproducible_research.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\documentclass[conference,final,10pt,onecolumn]{IEEEtran}


%%% packages
\usepackage{amsmath}
\usepackage{balance}
\usepackage{booktabs}
\usepackage{color}
\usepackage{datetime}
\usepackage{etoolbox}
\usepackage{fancyvrb}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{ifpdf}
\usepackage{longtable}			% for DataFrame.to_latex (optional)
\usepackage{mdframed}
\usepackage{minted}
\usepackage{palatino}
\usepackage{pygments}
\usepackage{subfigure}
% better loading hyperref as the last pacakte
\usepackage[colorlinks,bookmarksopen,bookmarksnumbered,citecolor=red,urlcolor=red]{hyperref}
\tolerance=1000

%% specify a directory for figures
\graphicspath{{figures/}}

%%% settings
\IEEEoverridecommandlockouts%%

\hypersetup%%
{%%
  pdftitle={Reproducible Research for OMNeT++ Based on Python and Pweave},%%
  pdfauthor = {Kyeong Soo (Joseph) Kim},%%
  pdfsubject={OMNeT++ 2017 tutorial on reproducible research},%
  pdfcreator={PDFLaTeX}%
}%%

% framing minted environment
\BeforeBeginEnvironment{minted}{\begin{mdframed}}
\AfterEndEnvironment{minted}{\end{mdframed}}


\begin{document}


\title{Reproducible Research for OMNeT++ Based on Python and Pweave}%%
\author{%%
  Kyeong Soo (Joseph) Kim\\
  Department of Electrical and Electronic Engineering\\
  Xi'an Jiaotong-Liverpool University\\
  Suzhou 215123, Jiangsu Province, P. R. China%%
}%%
% \longdate%%
% \date{\today}%%
\maketitle%%


\begin{abstract}
  As the amount and complexity of model implementation code, configuration
  files, and resulting data for simulation experiments are ever increasing, it
  becomes a real challenge to reliably and efficiently reproduce simulation data
  and their analysis results published in a scientific paper not only by its
  readers but also the authors themselves, which makes the claims and
  contributions made in the paper questionable. The idea of reproducible
  research comes as a solution to these problems and suggests that any
  scientific claims should be published together with relevant experimental data
  and software code for their analysis so that readers may verify the findings
  and build upon them; in case of computer simulation, the details of simulation
  implementation and its configurations are also should be provided. In this
  tutorial, we illustrate the practice of the reproducible research for OMNeT++
  simulation based on Pweave and Python, where we show how to embed simulation
  configuration files and Python analysis code, import simulation data with
  automatic updating of simulation results, and analyze data and present their
  results in a \LaTeX file.
\end{abstract}


\section{Introduction}
\label{sec:introduction}
%%% 
We provide this file as a minimal template for a reproducible research document
for OMNeT++ based on Python and
\href{http://mpastell.com/pweave}{Pweave}. Documentation part is prepared for
\LaTeX{} and code between \texttt{<<>>} and \texttt{@} is executed and results
are included in the resulting document.

You can define various options for code chunks to control code execution and
formatting (see
\href{http://mpastell.com/pweave/usage.html\#code-chunk-options}{Pweave docs}).


\section{Reproducible Research}
\label{sec:repr-rese}
%%% 
Reproducible research is a key to any scientific method and ensures repeating an
experiment and the results of its analysis in any place with any person.

A study can be truly reproducible when it satisfies at least the following three
criteria.
\begin{itemize}
\item All methods are fully reported.
\item All data and files used for the analysis are (publicly) available.
\item The process of analyzing raw data is well reported and preserved.
\end{itemize}

This means\\
Same data + Same script = Same results


\section{Python and Pweave}
\label{sec:python-pweave}
%%%
Fig.~\ref{fig:weaving_tangling} shows an overview of weaving and tangling
procedures provided by Pweave.
%%%
\begin{figure}[!tb]
  \centering
  \includegraphics[angle=-90,width=.7\linewidth]{weaving_tangling}
  \caption{Overview of weaving and tangling procedures.}
  \label{fig:weaving_tangling}
\end{figure}
%%%


\section{Example: OMNeT++ FIFO Simulation}
\label{sec:exampl-omnet++-fifo}
%%%

\subsection{Simulation Configurations}
\label{sec:simul-conf}
%%%

<<name='settings',term=False,wrap=True>>=
import os

# set path to run Fifo simulation in DOS command prompt
omnetpp_root = os.environ['OMNETPP_ROOT']
path1 = '/'.join([omnetpp_root, 'bin'])
path2 = '/'.join([omnetpp_root, 'tools', 'win64', 'mingw64', 'bin'])
os.environ['Path'] = ';'.join([path1, path2, os.environ['Path']])

# run the simulation only if input files are newer than results
# - it can be extended to checking multiple NED, INI, and result files
ned = '/'.join(['.', 'fifo', 'Fifo.ned'])
ini = '/'.join(['.', 'fifo', 'omnetpp.ini'])
sca = '/'.join(['.', 'fifo', 'results', 'Fifo1-st=0.01-#0.sca'])
fifo = '/'.join(['.', 'fifo', 'fifo.exe'])
@ 

\begin{listing}[H]
\begin{mdframed}
  \inputminted[fontsize=\scriptsize]{java}{./fifo/FifoNet.ned}
\end{mdframed}
\caption{'FifoNet.ned' for FIFO sample model.}
\label{lst:fifonet_ned}
\end{listing}

\begin{listing}[H]
\begin{mdframed}
  \inputminted[fontsize=\scriptsize]{shell}{./fifo/omnetpp.ini}
\end{mdframed}
\caption{'omnetpp.ini' for FIFO sample model.}
\label{lst:omnetpp_ini}
\end{listing}


\subsection{Importing Simulation Results}
\label{sec:import-simul-results}
%%%
Below is a python scrip that can run the OMNeT++ FIFO simulation only when
simulation input files are newer than result files.

<<name='update_results',term=False,wrap=True>>=
import subprocess

# run the simulation only if input files are newer than results
if (not os.path.isfile(sca)) or (os.path.getmtime(ini) > os.path.getmtime(sca)):
    cwd = '/'.join(['.', 'fifo'])
    subprocess.call([fifo, '-u', 'Cmdenv', '-f', 'omnetpp.ini', '-c', 'Fifo1'], cwd=cwd)

# convert Fifo's scalar files to CSV
cwd = '/'.join(['.', 'fifo', 'results'])
subprocess.call(['scavetool', 'export', '-T', 's', '-o', 'fifo.csv', '*.sca'], cwd=cwd)
@

<<name='import_data',term=False,wrap=True>>=
import pandas as pd
fifo_df = pd.read_csv('/'.join([cwd, 'fifo.csv']))
@

% \subsection{Overview of Imported Data}
% \label{sec:overv-import-data}
% %
% 
The following Python code chunk can automatically generate a long table over
multiple pages from a pandas dataframe\footnote{Note that a space is inserted
  between '>>' and '=' to prevent Pweave from weaving the code; it seems that
  there is no way to escape Pweave chunk code markers.}:
\begin{verbatim}
<<echo=False,results='raw'>> =
import numpy as np
df = fifo_df.filter(regex="^(?!(r|R)un).*$")  # exclude columns starting with run/Run
print(df.to_latex(longtable=True))
@
\end{verbatim}

<<echo=False,results='raw'>>=
import numpy as np
df = fifo_df.filter(regex="^(?!(r|R)un).*$")  # exclude columns starting with run/Run
print(df.to_latex(longtable=True))
@

This automatic generation of a table from a pandas dataframe is quite handy
because we can quickly go through overall data and investigate important results
in detail (i.e., actual numbers not just a trend provided by plots). The
suggested solution of embedding a long table within a Pweave document, however,
is not perfect yet as there is no option in \textit{pandas.DataFrame.to\_latex}
API providing a caption and a label within a generated longtable
environment. Note that surrounding the longtable with a tabular environment with
its own caption and label does not work when the table spans over more than one
pages.


\subsection{Data Analysis and Presentation}
\label{sec:data-analys-pres}
%%%
Here we process the dataframe obtained in Sec.~\ref{sec:import-simul-results}
and create a bar plot with error bars showing mean queueing time against packet
service time.

<<caption='Mean queueing time  vs. service time (with 99 percent confidence intervals).'>>=
import matplotlib.pyplot as plt
import scipy as sp
import scipy.stats


def ci(x):                      # 99% confidence interval
    a = 1.0*np.array(x)
    n = len(a)
    m, se = np.mean(a), scipy.stats.sem(a)
    return (se * sp.stats.t._ppf((1+0.99)/2., n-1))


pivoted = fifo_df.pivot(index='Run', columns='Name', values='Unnamed: 19')
st_vs_qt = pivoted.pivot_table(index='st', values='queueingTime:mean')
errs = pivoted.pivot_table(index='st', values='queueingTime:mean', aggfunc=ci)
st_vs_qt.plot(kind='bar', legend=None, yerr=errs, color='red',
              error_kw=dict(ecolor='black', elinewidth=1, capsize=5))
plt.xlabel('Service Time')
plt.ylabel('Mean Queueing Time')
plt.show()
@ 


\section{Summary}
\label{sec:summary}
%%%
This short tutorial aims to demonstrate the power of Python and Pweave in making
reproducible research for OMNeT++. Taking OMNeT++ FIFO simulation as an example,
we explain how to embed simulation configuration files and Python analysis code,
import simulation data with automatic updating of simulation results, and
analyze data and present their results in a \LaTeX file. The source file of this
tutorial has been prepared as a minimal template for future reproducible
research for OMNeT++.


% %%% References
% % with BiBTeX%%
% \bibliographystyle{IEEEtran}%%
% \bibliography{IEEEabrv,kks}%%
% % without BiBTeX (i.e., standalone file)%%
% % attach 'omnetpp2017_reproducible_research.bbl'%%


\end{document}
