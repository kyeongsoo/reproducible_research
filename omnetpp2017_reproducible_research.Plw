%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Pweave document; to process, run the following:
% $ pweave -f texpygments omnetpp2017_reproducible_research.Plw
% $ latexmk -pdf omnetpp2017_reproducible_research.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\documentclass[conference,final,10pt,onecolumn]{IEEEtran}


%%% packages
\usepackage{amsmath}
\usepackage{balance}
\usepackage{booktabs}
\usepackage{color}
\usepackage{datetime}
\usepackage{etoolbox}
\usepackage{fancyvrb}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{ifpdf}
\usepackage{longtable}			% for DataFrame.to_latex (optional)
\usepackage{mdframed}
\usepackage{minted}
\usepackage{palatino}
\usepackage{pygments}
\usepackage{subfigure}
% better loading hyperref as the last pacakte
\usepackage[colorlinks,bookmarksopen,bookmarksnumbered,citecolor=red,urlcolor=red]{hyperref}
\tolerance=1000


%%% settings
\IEEEoverridecommandlockouts%%

\hypersetup%%
{%%
  pdftitle={Reproducible Research for OMNeT++ Based on Python and Pweave},%%
  pdfauthor = {Kyeong Soo (Joseph) Kim},%%
  pdfsubject={OMNeT++ 2017 tutorial on reproducible research},%
  pdfcreator={PDFLaTeX}%
  % colorlinks=TRUE,%%
  % linkcolor=black,%%
  % citecolor=blue,%%
  % urlcolor=blue%%
}%%

% framing minted environment
\BeforeBeginEnvironment{minted}{\begin{mdframed}}
\AfterEndEnvironment{minted}{\end{mdframed}}


\begin{document}


\title{Reproducible Research for OMNeT++ Based on Python and Pweave}%%
\author{%%
  Kyeong Soo (Joseph) Kim\\
  Department of Electrical and Electronic Engineering\\
  Xi'an Jiaotong-Liverpool University\\
  Suzhou 215123, Jiangsu Province, P. R. China%%
}%%
% \longdate%%
% \date{\today}%%
\maketitle%%


\begin{abstract}
  As the amount and complexity of model implementation code, configuration
  files, and resulting data for simulation experiments are ever increasing, it
  becomes a real challenge to reliably and efficiently reproduce simulation data
  and their analysis results published in a scientific paper not only by its
  readers but also the authors themselves, which makes the claims and
  contributions made in the paper questionable. The idea of reproducible
  research comes as a solution to these problems and suggests that any
  scientific claims should be published together with relevant experimental data
  and software code for their analysis so that readers may verify the findings
  and build upon them; in case of computer simulation, the details of simulation
  implementation and its configurations are also should be provided. In this
  tutorial, we illustrate the practice of the reproducible research for OMNeT++
  simulation based on Pweave and Python, where we show how to embed simulation
  configuration files and Python analysis code, to import simulation data with
  automatic updating of simulation results, and to analyze data and present
  their results in a \LaTeX file.
\end{abstract}


\section{Introduction}
\label{sec:introduction}
%%% 
This an example of a document that can be published using
\href{http://mpastell.com/pweave}{Pweave}. Text is written using \LaTeX{} and
code between \texttt{<<>>} and \texttt{@} is executed and results are included
in the resulting document.

You can define various options for code chunks to control code execution and
formatting (see
\href{http://mpastell.com/pweave/usage.html\#code-chunk-options}{Pweave docs}).


\section{Reproducible Research}
\label{sec:repr-rese}
%%% 
I was asked about my understanding of reproducible research, and how that
applies to social research.  Here is how I see: Reproducible research is key to
any scientific method, including applied social sciences. My minimalist
understanding of reproducible research is quite simple: The capacity of
repeating an experiment in any place with any person.

A study can be truly reproducible when it satisfies at least the following three criteria.
\begin{itemize}
\item All methods are fully reported.
\item All data and files used for the analysis are (publicly) available.
\item The process of analyzing raw data is well reported and preserved.
\end{itemize}

Therefore:\\
Same data + Same script = Same results


\section{Python and Pweave}
\label{sec:python-pweave}
%%%



\section{Example: OMNeT++ Aloha Simulation}
\label{sec:exampl-omnet++-aloha}
%%%

{%%
  \color{red}
  TODO
  \begin{itemize}
  \item Provide an overview with a diagram.
  \item Provide more analyses and results.
  \end{itemize}
}%%

\subsection{Simulation Configurations}
\label{sec:simul-conf}
%%%

<<name='settings',term=False,wrap=True>>=
import os

# set path to run Aloha simulation in DOS command prompt
omnetpp_root = os.environ['OMNETPP_ROOT']
path1 = '/'.join([omnetpp_root, 'bin'])
path2 = '/'.join([omnetpp_root, 'tools', 'win64', 'mingw64', 'bin'])
os.environ['Path'] = ';'.join([path1, path2, os.environ['Path']])

# run the simulation only if input files are newer than results
# - it can be extended to checking multiple NED, INI, and result files
ned = '/'.join([omnetpp_root, 'samples', 'aloha', 'Aloha.ned'])
ini = '/'.join([omnetpp_root, 'samples', 'aloha', 'omnetpp.ini'])
sca = '/'.join([omnetpp_root, 'samples', 'aloha', 'results', 'PureAlohaExperiment-numHosts=10,mean=1-#0.sca'])
aloha = '/'.join([omnetpp_root, 'samples', 'aloha', 'aloha.exe'])
@ 

\begin{listing}[H]
\begin{mdframed}
  \inputminted[fontsize=\scriptsize]{java}{/omnetpp/samples/aloha/Aloha.ned}
\end{mdframed}
\caption{'Aloha.ned' for Aloha sample model.}
\label{lst:aloha_ned}
\end{listing}

\begin{listing}[H]
\begin{mdframed}
  \inputminted[fontsize=\scriptsize]{shell}{/omnetpp/samples/aloha/omnetpp.ini}
\end{mdframed}
\caption{'omnetpp.ini' for Aloha sample model.}
\label{lst:omnetpp_ini}
\end{listing}


\subsection{Importing Simulation Results}
\label{sec:import-simul-results}
%%%
Below is a python scrip that can run the OMNeT++ Aloha simulation only when
simulation input files are newer than result files.

<<name='update_results',term=False,wrap=True>>=
import subprocess

# run the simulation only if input files are newer than results
if os.path.getmtime(ini) > os.path.getmtime(sca):
    cwd = '/'.join([omnetpp_root, 'samples', 'aloha'])
    subprocess.call([aloha, '-u', 'Cmdenv' '-f', 'omnetpp.ini', '-c', 'PureAlohaExperiment'], cwd=cwd)

# convert Aloha's scalar files to CSV
cwd = '/'.join([omnetpp_root, 'samples', 'aloha', 'results'])
subprocess.call(['scavetool', 'export', '-T', 's', '-o', 'aloha.csv', '*.sca'], cwd=cwd)
@

<<name='import_data',term=False,wrap=True>>=
import pandas as pd
aloha_df = pd.read_csv('/'.join([cwd, 'aloha.csv']))
@

% \subsection{Overview of Imported Data}
% \label{sec:overv-import-data}
% %
% 
The following Python code chunk can automatically generate a long table over
multiple pages from a pandas dataframe\footnote{Note that a space is inserted
  between '>>' and '=' to prevent Pweave from weaving the code; it seems that
  there is no way to escape Pweave chunk code markers.}:
\begin{verbatim}
<<echo=False,results='raw'>> =
import numpy as np
df = aloha_df[['Module', 'Name', 'Unnamed: 20']]
print(df.to_latex(longtable=True))
@
\end{verbatim}

<<echo=False,results='raw'>>=
import numpy as np
df = aloha_df[['Module', 'Name', 'Unnamed: 20']]
print(df.iloc[:51].to_latex(longtable=True)) # limit to first 50 rows
@

This automatic generation of a table from a pandas dataframe is quite handy
because we can quickly go through overall data and investigate important results
in detail (i.e., numbers not just a trend provided by plots). The suggested
solution of embedding a long table within a Pweave document, however, is not
perfect yet as there is no option in pandas.DataFrame.to\_latex API providing a
caption and a label within a generated longtable environment. Note that
surrounding the longtable with a tabular environment with its own caption and
label does not work when the table spans over more than one pages.


\subsection{Data Analysis and Presentation}
\label{sec:data-analys-pres}
%%%
Here we process the dataframe obtained in Sec.~\ref{sec:import-simul-results}
and create a line plot showing the channel utilization against mean interarrival
time.

<<caption='Channel Utilization vs. Mean Interarrival Time.'>>=
import matplotlib.pyplot as plt

wide_df = aloha_df.pivot('Run', columns='Name', values='Unnamed: 20')
util_vs_ia = wide_df.pivot_table(index='mean', columns='numHosts', values='channelUtilization:last')
util_vs_ia.plot.line(label='Number of Hosts')
plt.xlabel('Mean Interarrival Time')
plt.ylabel('Channel Utilization')
plt.show()
@ 


\section{Summary}
\label{sec:summary}
%%%
We have presented ...


% %%% References
% % with BiBTeX%%
% \bibliographystyle{IEEEtran}%%
% \bibliography{IEEEabrv,kks}%%
% % without BiBTeX (i.e., standalone file)%%
% % attach 'omnetpp2017_reproducible_research.bbl'%%


\end{document}
